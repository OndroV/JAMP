message(temp)
cat(file="../log.txt", c("\n", temp), append=T, sep="\n")
cat(file="../log.txt", temp, append=T, sep="\n")
cat(file="../log.txt", temp, append=T, sep="\n")
sub("r1.txt", "PE.fastq", new_names)
new_names <- sub(".*(_data/.*)", "\\1", files)
sub("r1.txt", "PE.fastq", new_names)
sub(".fast", "_trunc.fast", new_names)
files
rigth
left=0
right=0
left
rigth
new_names
paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_trunc.fast", new_names)
new_names
paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")
new_names
sub("_data/(.*)_PE_.*", "", new_names[i])
sub("_data/(.*)_PE_.*", "", new_names)
sub("_data/(.*)_PE_.*", "\\1", new_names)
files
files[1]
files
passed
short_name
sub("_data/(.*)_PE_.*", "\\1", new_names[i])
sub("_data/(.*)_PE_.*", "\\1", new_names[1])
message("Module completed!")
# U_truncate v0.1#
#
U_merge_PE <- function(files="latest", left=0, right=0, fastq=T){#
#
Core(module="U_truncate")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to truncate reads of ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
# new file names#
#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_trunc.fast", new_names)#
cmd <- paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
#
new_count <- Count_sequences(new_names[i])#
old_count <- Count_sequences(files[i])#
passed <- round(new_count/old_count*100, digits=2)#
#
tab_exp <- cbind(tab_exp, c(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), new_count, passed))#
#
meep <- paste(sub("_data/(.*)_PE_.*", "\\1", new_names[1]), ": ", passed, "% passed", sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Abundance", "pct_pass")#
write.csv(tab_exp, "_stats/truncate_pass.csv")#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
# U_truncate v0.1#
#
U_merge_PE <- function(files="latest", left=0, right=0, fastq=T){#
#
Core(module="U_truncate")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to truncate reads of ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
# new file names#
#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_trunc.fast", new_names)#
cmd <- paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
#
new_count <- Count_sequences(new_names[i])#
old_count <- Count_sequences(files[i])#
passed <- round(new_count/old_count*100, digits=2)#
#
tab_exp <- cbind(tab_exp, c(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), new_count, passed))#
#
meep <- paste(sub("_data/(.*)_PE_.*", "\\1", new_names[1]), ": ", passed, "% passed", sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Abundance", "pct_pass")#
write.csv(tab_exp, "_stats/truncate_pass.csv")#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
library("JAMP")
setwd("~/Desktop/package_test2/")
# U_truncate v0.1#
#
U_merge_PE <- function(files="latest", left=0, right=0, fastq=T){#
#
Core(module="U_truncate")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to truncate reads of ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
# new file names#
#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_trunc.fast", new_names)#
cmd <- paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
#
new_count <- Count_sequences(new_names[i])#
old_count <- Count_sequences(files[i])#
passed <- round(new_count/old_count*100, digits=2)#
#
tab_exp <- cbind(tab_exp, c(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), new_count, passed))#
#
meep <- paste(sub("_data/(.*)_PE_.*", "\\1", new_names[1]), ": ", passed, "% passed", sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Abundance", "pct_pass")#
write.csv(tab_exp, "_stats/truncate_pass.csv")#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
# U_truncate v0.1#
#
U_truncate <- function(files="latest", left=0, right=0, fastq=T){#
#
Core(module="U_truncate")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to truncate reads of ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
# new file names#
#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_trunc.fast", new_names)#
cmd <- paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
#
new_count <- Count_sequences(new_names[i])#
old_count <- Count_sequences(files[i])#
passed <- round(new_count/old_count*100, digits=2)#
#
tab_exp <- cbind(tab_exp, c(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), new_count, passed))#
#
meep <- paste(sub("_data/(.*)_PE_.*", "\\1", new_names[1]), ": ", passed, "% passed", sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Abundance", "pct_pass")#
write.csv(tab_exp, "_stats/truncate_pass.csv")#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
U_truncate(left=10, rigth=0)
U_truncate(left=10, right=0)
cmd
new_names[i]
A
A[9] <- "Lengths min 267, low 539, med 544, hi 551, max 1326"
A
A<- "Lengths min 267, low 539, med 544, hi 551, max 1326"
A
sub(".*med (.*), hi.*", "\\1", A)
as.numeric(sub(".*med (.*), hi.*", "\\1", A))
# U_truncate v0.1#
#
U_truncate <- function(files="latest", left=0, right=0, fastq=T){#
#
Core(module="U_truncate")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to truncate reads of ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
# new file names#
#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_trunc.fast", new_names)#
cmd <- paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
#
new_count <- Count_sequences(new_names[i])#
old_count <- Count_sequences(files[i])#
passed <- round(new_count/old_count*100, digits=2)#
#
A <- system2("usearch", paste("-fastx_info \"", new_names[i], "\" -secs 5"), stdout=T, stderr=T)#
medianL <- as.numeric(sub(".*med (.*), hi.*", "\\1", A[9]))#
#
tab_exp <- cbind(tab_exp, c(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), new_count, passed, medianL))#
#
meep <- paste(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), ": ", passed, "% passed - median L: ", medianL, sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Abundance", "pct_pass", "medianL")#
write.csv(tab_exp, "_stats/truncate_pass.csv")#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
U_truncate(left=10, right=0)
warnings()
# U_truncate v0.1#
#
U_truncate <- function(files="latest", left=0, right=0, fastq=T){#
#
Core(module="U_truncate")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to truncate reads of ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
# new file names#
#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_trunc.fast", new_names)#
cmd <- paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
#
new_count <- Count_sequences(new_names[i])#
old_count <- Count_sequences(files[i])#
passed <- round(new_count/old_count*100, digits=2)#
#
A <- system2("usearch", paste("-fastx_info \"", new_names[i], "\" -secs 5", sep=""), stdout=T, stderr=T)#
medianL <- as.numeric(sub(".*med (.*), hi.*", "\\1", A[9]))#
#
tab_exp <- cbind(tab_exp, c(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), new_count, passed, medianL))#
#
meep <- paste(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), ": ", passed, "% passed - median L: ", medianL, sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Abundance", "pct_pass", "medianL")#
write.csv(tab_exp, "_stats/truncate_pass.csv")#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
# U_truncate v0.1#
#
U_truncate <- function(files="latest", left=0, right=0, fastq=T){#
#
Core(module="U_truncate")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to truncate reads of ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
# new file names#
#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_trunc.fast", new_names)#
cmd <- paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
#
new_count <- Count_sequences(new_names[i])#
old_count <- Count_sequences(files[i])#
passed <- round(new_count/old_count*100, digits=2)#
#
A <- system2("usearch", paste("-fastx_info \"", new_names[i], "\" -secs 5", sep=""), stdout=T, stderr=T)#
medianL <- as.numeric(sub(".*med (.*), hi.*", "\\1", A[9]))#
#
tab_exp <- cbind(tab_exp, c(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), new_count, passed, medianL))#
#
meep <- paste(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), ": ", passed, "% passed - median L: ", medianL, sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Abundance", "pct_pass", "medianL")#
write.csv(tab_exp, "_stats/truncate_pass.csv")#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
U_truncate(left=10, right=0)
A <- system2("usearch", "-fastx_info /Users/luckylion/Desktop/package_test2/D_Cutadapt/_data/Ak15_04GK_BF20_BR11_PE_RC_cut.fastq", stdout=T, stderr=T)
A
medianL <- as.numeric(sub(".*med (.*), hi.*", "\\1", A[9]))
medianL
new_names[i]
i <- 1
A <- system2("usearch", paste("-fastx_info \"", new_names[i], "\" -secs 5", sep=""), stdout=T, stderr=T)
paste("-fastx_info \"", new_names[i], "\" -secs 5", sep="")
# U_truncate v0.1#
#
U_truncate <- function(files="latest", left=0, right=0, fastq=T){#
#
Core(module="U_truncate")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to truncate reads of ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
# new file names#
#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_trunc.fast", new_names)#
cmd <- paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
#
new_count <- Count_sequences(new_names[i])#
old_count <- Count_sequences(files[i])#
passed <- round(new_count/old_count*100, digits=2)#
#
A <- system2("usearch", paste("-fastx_info \"", new_names[i], "\" -secs 5", sep=""), stdout=T, stderr=T)#
medianL <- as.numeric(sub(".*med (.*), hi.*", "\\1", A[9]))#
tab_exp <- cbind(tab_exp, c(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), new_count, passed, medianL))#
#
meep <- paste(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), ": ", passed, "% passed - median L: ", medianL, sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Abundance", "pct_pass", "medianL")#
write.csv(tab_exp, "_stats/truncate_pass.csv")#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
# U_truncate v0.1#
#
U_truncate <- function(files="latest", left=0, right=0, fastq=T){#
#
Core(module="U_truncate")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to truncate reads of ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
# new file names#
#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_trunc.fast", new_names)#
cmd <- paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
#
new_count <- Count_sequences(new_names[i])#
old_count <- Count_sequences(files[i])#
passed <- round(new_count/old_count*100, digits=2)#
#
A <- system2("usearch", paste("-fastx_info \"", new_names[i], "\" -secs 5", sep=""), stdout=T, stderr=T)#
medianL <- as.numeric(sub(".*med (.*), hi.*", "\\1", A[9]))#
tab_exp <- cbind(tab_exp, c(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), new_count, passed, medianL))#
#
meep <- paste(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), ": ", passed, "% passed - medianL: ", medianL, sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Abundance", "pct_pass", "medianL")#
write.csv(tab_exp, "_stats/truncate_pass.csv")#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("E_U_truncate")
A <- system2("usearch", paste("-fastx_info \"", new_names[i], "\" -secs 5", sep=""), stdout=T, stderr=T)
A
medianL <- as.numeric(sub(".*med (.*), hi.*", "\\1", A[9]))
medianL
A
grep(A)
grep("Lengths min ", A)
grep("Lengths min ", A)
new_names[i]
cat(file="../_stats/log_length.txt", new_names[i],A, append=T, sep="\n")
cat(file="_stats/log_length.txt", new_names[i],A, append=T, sep="\n")
cat(file="_stats/log_length.txt", new_names[i],A, append=T, sep="\n")
cat(file="_stats/log_length.txt", new_names[i],A, append=T, sep="\n")
cat(file="_stats/log_length.txt", new_names[i],A, append=T, sep="\n")
cat(file="_stats/log_length.txt", new_names[i],A, append=T, sep="\n")
cat(file="_stats/log_length.txt", new_names[i], "\n", A,"\n\n\n", append=T, sep="\n")
cat(file="_stats/log_length.txt", new_names[i], "\n", A,"\n\n\n", append=T, sep="\n")
cat(file="_stats/log_length.txt", new_names[i], "\n", A,"\n\n\n", append=T, sep="\n")
cat(file="_stats/log_length.txt", new_names[i], "\n", A,"\n\n\n", append=T, sep="\n")
cat(file="_stats/log_length.txt", new_names[i], "\n", A,"\n\n\n", append=T, sep="\n")
setwd("~/Desktop/package_test2/")
setwd("E_U_truncate")
setwd("~/Desktop/package_test2/")
U_truncate(left=10, right=0)
# U_truncate v0.1#
#
U_truncate <- function(files="latest", left=0, right=0, fastq=T){#
#
Core(module="U_truncate")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to truncate reads of ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
# new file names#
#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_trunc.fast", new_names)#
cmd <- paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
#
new_count <- Count_sequences(new_names[i])#
old_count <- Count_sequences(files[i])#
passed <- round(new_count/old_count*100, digits=2)#
#
A <- system2("usearch", paste("-fastx_info \"", new_names[i], "\" -secs 5", sep=""), stdout=T, stderr=T)#
medianL <- as.numeric(sub(".*med (.*), hi.*", "\\1", A[grep("Lengths min ", A)]))#
#
message(new_names[i])#
print(A)#
#
cat(file="_stats/log_length.txt", new_names[i], "\n", A,"\n\n", append=T, sep="\n")#
tab_exp <- rbind(tab_exp, c(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), new_count, passed, medianL))#
#
meep <- paste(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), ": ", passed, "% passed - medianL: ", medianL, sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Abundance", "pct_pass", "medianL")#
write.csv(tab_exp, "_stats/truncate_pass.csv")#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
setwd("E_U_truncate")
U_truncate(left=10, right=0)
# U_truncate v0.1#
#
U_truncate <- function(files="latest", left=0, right=0, fastq=T){#
#
Core(module="U_truncate")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to truncate reads of ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
# new file names#
#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_trunc.fast", new_names)#
cmd <- paste("-fastx_truncate \"", files,"\"", " -stripleft ", left, " -stripright ", right, " -fastqout \"", new_names, "\"", sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
#
new_count <- Count_sequences(new_names[i])#
old_count <- Count_sequences(files[i])#
passed <- round(new_count/old_count*100, digits=2)#
#
A <- system2("usearch", paste("-fastx_info \"", new_names[i], "\" -secs 5", sep=""), stdout=T, stderr=T)#
medianL <- as.numeric(sub(".*med (.*), hi.*", "\\1", A[grep("Lengths min ", A)]))#
#
cat(file="_stats/log_length.txt", new_names[i], "\n", A,"\n\n", append=T, sep="\n")#
tab_exp <- rbind(tab_exp, c(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), new_count, passed, medianL))#
#
meep <- paste(sub("_data/(.*)_PE_.*", "\\1", new_names[i]), ": ", passed, "% passed - medianL: ", medianL, sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Abundance", "pct_pass", "medianL")#
write.csv(tab_exp, "_stats/truncate_pass.csv")#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
Core(module="Minmax")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_minmax.fast", new_names)
files="latest"
min=NA
max=NA
plusminus=c(NA, 10)
fastq=T
Core(module="Minmax")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_minmax.fast", new_names)
setwd("~/Desktop/package_test2/")
new_names
files
last_data
setwd("~/Desktop/package_test2/")
Core(module="Minmax")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_minmax.fast", new_names)
files="latest"
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_minmax.fast", new_names)
plusminus=c(NA, 10)
plusminus
plusminus[1]
plusminus[1] <- 220
plusminus
plusminus[1] - 10
# calculate min max#
if(!is.na(plusminus[1])){#
min <- plusminus[1] - 10#
max <- plusminus[1] + 10#
}
min
max
10-5
10+5
dir.create("_stats/_cutadapt_logs")#
log_names <- sub("_data", "_stats/_cutadapt_logs", new_names)#
log_names <- sub(".fast[aq]", ".txt", log_names)
log_names
files
new_names
paste("\"", files, "\" -o \"", new_names, "\" -f ", if(fastq){"fastq"}else{"fasta"}, " -m 207 -M 227", sep="")
if(!is.na(min)){paste(" -m", min)}
paste("\"", files, "\" -o \"", new_names, "\" -f ", if(fastq){"fastq"}else{"fasta"}, if(!is.na(min)){paste(" -m", min)}, if(!is.na(min)){paste(" -M", max)}, sep="")
paste("\"", files, "\" -o \"", new_names, "\" -f ", if(fastq){"fastq"}else{"fasta"}, if(!is.na(min)){" -m"}, if(!is.na(min)){min}, if(!is.na(min)){" -M"}, if(!is.na(min)){max}, sep="")
paste("\"", files, "\" -o \"", new_names, "\" -f ", if(fastq){"fastq"}else{"fasta"}, if(!is.na(min)){" -m "}, if(!is.na(min)){min}, if(!is.na(min)){" -M "}, if(!is.na(min)){max}, sep="")
cmd <- paste("\"", files, "\" -o \"", new_names, "\" -f ", if(fastq){"fastq"}else{"fasta"}, if(!is.na(min)){" -m "}, if(!is.na(min)){min}, if(!is.na(min)){" -M "}, if(!is.na(min)){max}, sep="")
new_names
cmd
log_names
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_minmax.fast", new_names)#
#
#log names#
dir.create("_stats/_cutadapt_logs")#
log_names <- sub("_data", "_stats/_cutadapt_logs", new_names)#
log_names <- sub(".fast[aq]", ".txt", log_names)#
# calculate min max#
if(!is.na(plusminus[1])){#
min <- plusminus[1] - 10#
max <- plusminus[1] + 10#
}#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
#
# make cmd#
cmd <- paste("\"", files, "\" -o \"", new_names, "\" -f ", if(fastq){"fastq"}else{"fasta"}, if(!is.na(min)){" -m "}, if(!is.na(min)){min}, if(!is.na(min)){" -M "}, if(!is.na(min)){max}, sep="")#
exp <- NULL#
temp <- new_names#
for (i in 1:length(cmd1)){#
A <- system2("cutadapt", cmd[i], stdout=T, stderr=T)#
cat(file=log_names[i], A, append=T, sep="\n")
}
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_minmax.fast", new_names)#
#
#log names#
dir.create("_stats/_cutadapt_logs")#
log_names <- sub("_data", "_stats/_cutadapt_logs", new_names)#
log_names <- sub(".fast[aq]", ".txt", log_names)#
# calculate min max#
if(!is.na(plusminus[1])){#
min <- plusminus[1] - 10#
max <- plusminus[1] + 10#
}#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
#
# make cmd#
cmd <- paste("\"", files, "\" -o \"", new_names, "\" -f ", if(fastq){"fastq"}else{"fasta"}, if(!is.na(min)){" -m "}, if(!is.na(min)){min}, if(!is.na(min)){" -M "}, if(!is.na(min)){max}, sep="")#
exp <- NULL#
temp <- new_names#
for (i in 1:length(cmd)){#
A <- system2("cutadapt", cmd[i], stdout=T, stderr=T)#
cat(file=log_names[i], A, append=T, sep="\n")
}
A
stats <- readLines(log_names[i])
reads_in <- stats[grep("Total reads processed:", stats)[1]]#
reads_in <- sub(".* processed: +", "", reads_in)#
reads_in <- as.numeric(gsub(",", "", reads_in))
reads_in
reads_out <- stats[grep("Reads written \\(passing filters\\):", stats)[1]]#
reads_out <- sub(".* filters.: +", "", reads_out)#
reads_out <- sub(" .*", "", reads_out)#
reads_out <- as.numeric(gsub(",", "", reads_out))
reads_out
keep <- round(reads_out/reads_in*100, digits=2)
keep
exp <- rbind(exp, c(sub(".*_data/(.*)", "\\1", temp[i]), reads_out, keep))
exp
# Minmax v0.1#
#
Minmax <- function(files="latest", min=NA, max=NA, plusminus=c(NA, 10), fastq=T){#
#
Core(module="Minmax")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_minmax.fast", new_names)#
#
#log names#
dir.create("_stats/_cutadapt_logs")#
log_names <- sub("_data", "_stats/_cutadapt_logs", new_names)#
log_names <- sub(".fast[aq]", ".txt", log_names)#
# calculate min max#
if(!is.na(plusminus[1])){#
min <- plusminus[1] - 10#
max <- plusminus[1] + 10#
}#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
#
# make cmd#
cmd <- paste("\"", files, "\" -o \"", new_names, "\" -f ", if(fastq){"fastq"}else{"fasta"}, if(!is.na(min)){" -m "}, if(!is.na(min)){min}, if(!is.na(min)){" -M "}, if(!is.na(min)){max}, sep="")#
exp <- NULL#
temp <- new_names#
for (i in 1:length(cmd)){#
A <- system2("cutadapt", cmd[i], stdout=T, stderr=T)#
cat(file=log_names[i], A, append=T, sep="\n")#
#
# reporting#
stats <- readLines(log_names[i])#
#
reads_in <- stats[grep("Total reads processed:", stats)[1]]#
reads_in <- sub(".* processed: +", "", reads_in)#
reads_in <- as.numeric(gsub(",", "", reads_in))#
#
reads_out <- stats[grep("Reads written \\(passing filters\\):", stats)[1]]#
reads_out <- sub(".* filters.: +", "", reads_out)#
reads_out <- sub(" .*", "", reads_out)#
reads_out <- as.numeric(gsub(",", "", reads_out))#
#
keep <- round(reads_out/reads_in*100, digits=2)#
exp <- rbind(exp, c(sub(".*_data/(.*)", "\\1", temp[i]), reads_out, keep))#
#
meep <- paste(sub(".*_data/(.*)_PE.*", "\\1", temp[i]), " - ", keep, "% reads passed", sep="")#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
exp <- data.frame(exp)#
names(exp) <- c("Sample", "Abundance", "pct_pass")#
write.csv(exp, "_stats/minmax_pass.csv")#
#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
# Minmax v0.1#
#
Minmax <- function(files="latest", min=NA, max=NA, plusminus=c(NA, 10), fastq=T){#
#
Core(module="Minmax")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_minmax.fast", new_names)#
#
#log names#
dir.create("_stats/_cutadapt_logs")#
log_names <- sub("_data", "_stats/_cutadapt_logs", new_names)#
log_names <- sub(".fast[aq]", ".txt", log_names)#
# calculate min max#
if(!is.na(plusminus[1])){#
min <- plusminus[1] - 10#
max <- plusminus[1] + 10#
}#
temp <- paste("Starting to discard reads that don't fit the target length in ", length(cmd), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
#
# make cmd#
cmd <- paste("\"", files, "\" -o \"", new_names, "\" -f ", if(fastq){"fastq"}else{"fasta"}, if(!is.na(min)){" -m "}, if(!is.na(min)){min}, if(!is.na(min)){" -M "}, if(!is.na(min)){max}, sep="")#
exp <- NULL#
temp <- new_names#
for (i in 1:length(cmd)){#
A <- system2("cutadapt", cmd[i], stdout=T, stderr=T)#
cat(file=log_names[i], A, append=T, sep="\n")#
#
# reporting#
stats <- readLines(log_names[i])#
#
reads_in <- stats[grep("Total reads processed:", stats)[1]]#
reads_in <- sub(".* processed: +", "", reads_in)#
reads_in <- as.numeric(gsub(",", "", reads_in))#
#
reads_out <- stats[grep("Reads written \\(passing filters\\):", stats)[1]]#
reads_out <- sub(".* filters.: +", "", reads_out)#
reads_out <- sub(" .*", "", reads_out)#
reads_out <- as.numeric(gsub(",", "", reads_out))#
#
keep <- round(reads_out/reads_in*100, digits=2)#
exp <- rbind(exp, c(sub(".*_data/(.*)", "\\1", temp[i]), reads_out, keep))#
#
meep <- paste(sub(".*_data/(.*)_PE.*", "\\1", temp[i]), " - ", keep, "% reads passed", sep="")#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
exp <- data.frame(exp)#
names(exp) <- c("Sample", "Abundance", "pct_pass")#
write.csv(exp, "_stats/minmax_pass.csv")#
#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
Minmax(plusminus=c(312, 10))
Minmax(min=c(122,222,150))
Minmax(min=c(122,222,150,222,150,122,222,150,222,150, 122,222,150,222,150,122,222,150,222,150, 122,222,150,222,150,122,222,150,222,150, 122,222,150,222,150,122,222,150,222,150))
setwd("~/Desktop/package_test2/")
Minmax(min=c(122,222,150,222,150,122,222,150,222,150, 122,222,150,222,150,122,222,150,222,150, 122,222,150,222,150,122,222,150,222,150, 122,222,150,222,150,122,222,150,222,150), max=c(122,222,150,222,150,122,222,150,222,150, 122,222,150,222,150,122,222,150,222,150, 122,222,150,222,150,122,222,150,222,150, 122,222,150,222,150,122,222,150,222,150))
setwd("~/Desktop/package_test2/")
Minmax(plusminus=c(312, 10))
max_ee=0.5
setwd("~/Desktop/package_test2/")
files="latest"
max_ee=0.5
Core(module="U_max_ee")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T, pattern="_r1.txt")#
}#
#
temp <- paste("Starting to quality filter (max expected errors = " , max_ee, ") in " length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
#
# new file names
temp <- paste("Starting to quality filter (max expected errors = " , max_ee, ") in ", length(files), " samples.", sep="")
message(temp)
length(files)
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T, pattern="_r1.txt")
files
getwd()
last_data
files="latest"
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T, pattern="_r1.txt")#
}#
#
temp <- paste("Starting to quality filter (max expected errors = " , max_ee, ") in ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")
files="latest"
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to quality filter (max expected errors = " , max_ee, ") in ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")
new_names <- sub(".*(_data/.*)", "\\1", files)
new_names
sub(".fast", "_ee.fast", new_names)
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_ee.fast", new_names)#
#
dir.create("_stats/merge_stats")#
log_names <- sub("_data", "_stats/merge_stats", new_names)#
log_names <- sub("_PE.fast[aq]", "_PE_log.txt", log_names)
log_names
files
max_ee
cmd <- paste("-fastq_filter \"", files, "\" -fastaout \"", new_names, "\" -fastq_maxee ", max_ee, sep="")
cmd
A <- system2("usearch", cmd[i], stdout=F, stderr=F)
A
i <- 1
A <- system2("usearch", cmd[i], stdout=F, stderr=F)
A
getwd()
cmd
temp <- paste("Starting to quality filter (max expected errors = " , max_ee, ") in ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fastq", "_ee.fasta", new_names)#
#
dir.create("_stats/merge_stats")#
log_names <- sub("_data", "_stats/merge_stats", new_names)#
log_names <- sub("_PE.fasta", "_PE_log.txt", log_names)
cmd <- paste("-fastq_filter \"", files, "\" -fastaout \"", new_names, "\" -fastq_maxee ", max_ee, sep="")
cmd
A <- system2("usearch", cmd[i], stdout=F, stderr=F)
A
A <- system2("usearch", cmd[i], stdout=T, stderr=T)
A
log_names[i]
cat(A, log_names[i])
cat(A, file=log_names[i])
cat(A, file=log_names[i])
cat(A, file=log_names[i])
cat(A, file=log_names[i])
cat(A, file=log_names[i])
log_names
dir.create("_stats/merge_stats")#
log_names <- sub("_data", "_stats/merge_stats", new_names)#
log_names <- sub("_ee.fasta", "_ee.txt", log_names)
cat(A, file=log_names[i])
cat(A, file=log_names[i], sep="\n")
A
grep(A)
grep("FASTQ recs", A)
imput
imput <- A[grep("FASTQ recs", A)]
imput
sub(" +(.*) +FASTQ.*", "\\1", imput)
sub(" +(.*) *FASTQ.*", "\\1", imput)
sub(" +(.*) +FASTQ.*", "\\1", imput)
imput <- sub(" +(.*) +FASTQ.*", "\\1", imput)
imput
as.numeric(imput)
imput <- as.numeric(imput)
pass <- A[grep("Converted ", A)]
pass
pass <- sub(".*Converted..(.*), .*", "\\1", pass)
pass
pass <- as.numeric(pass)
pass
pass
pass/imput
pct <- round(pass/imput*100, digits=2)
pct
sub("_data/(.*)_PE", "\\1", new_names[i])
sub("_data/(.*)_PE.*", "\\1", new_names[i])
A
# U_max_ee v0.1#
#
U_max_ee <- function(files="latest", max_ee=0.5){#
#
Core(module="U_max_ee")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to quality filter (max expected errors = " , max_ee, ") in ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fastq", "_ee.fasta", new_names)#
#
dir.create("_stats/merge_stats")#
log_names <- sub("_data", "_stats/merge_stats", new_names)#
log_names <- sub("_ee.fasta", "_ee.txt", log_names)#
#
# cmd max EE#
cmd <- paste("-fastq_filter \"", files, "\" -fastaout \"", new_names, "\" -fastq_maxee ", max_ee, sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
A <- system2("usearch", cmd[i], stdout=T, stderr=T)#
cat(A, file=log_names[i], sep="\n")#
#
imput <- A[grep("FASTQ recs", A)]#
imput <- sub(" +(.*) +FASTQ.*", "\\1", imput)#
imput <- as.numeric(imput)#
#
pass <- A[grep("Converted ", A)]#
pass <- sub(".*Converted..(.*), .*", "\\1", pass)#
pass <- as.numeric(pass)#
#
pct <- round(pass/imput*100, digits=2)#
#
short_name <- sub("_data/(.*)_PE.*", "\\1", new_names[i])#
tab_exp <- rbind(tab_exp, c(short_name, pass, pct))#
#
meep <- paste(short_name, ": ", pct, "% pass EE ", sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Sequ_count", "percent_merged")#
#
write.csv(tab_exp, "_stats/max_ee_stats.csv")#
#
# make some plots?#
#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
U_max_ee()
pass <- A[grep("Converted ", A)]
pass
pass <- sub(" +(.*) +Converted.*", "\\1", pass)
pass
pass <- as.numeric(pass)
pass
# U_max_ee v0.1#
#
U_max_ee <- function(files="latest", max_ee=0.5){#
#
Core(module="U_max_ee")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to quality filter (max expected errors = " , max_ee, ") in ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fastq", "_ee.fasta", new_names)#
#
dir.create("_stats/merge_stats")#
log_names <- sub("_data", "_stats/merge_stats", new_names)#
log_names <- sub("_ee.fasta", "_ee.txt", log_names)#
#
# cmd max EE#
cmd <- paste("-fastq_filter \"", files, "\" -fastaout \"", new_names, "\" -fastq_maxee ", max_ee, sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
A <- system2("usearch", cmd[i], stdout=T, stderr=T)#
cat(A, file=log_names[i], sep="\n")#
#
imput <- A[grep("FASTQ recs", A)]#
imput <- sub(" +(.*) +FASTQ.*", "\\1", imput)#
imput <- as.numeric(imput)#
#
pass <- A[grep("Converted ", A)]#
pass <- sub(" +(.*) +Converted.*", "\\1", pass)#
pass <- as.numeric(pass)#
#
pct <- round(pass/imput*100, digits=2)#
#
short_name <- sub("_data/(.*)_PE.*", "\\1", new_names[i])#
tab_exp <- rbind(tab_exp, c(short_name, pass, pct))#
#
meep <- paste(short_name, ": ", pct, "% pass EE ", sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Sequ_count", "percent_merged")#
#
write.csv(tab_exp, "_stats/max_ee_stats.csv")#
#
# make some plots?#
#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
# U_max_ee v0.1#
#
U_max_ee <- function(files="latest", max_ee=0.5){#
#
Core(module="U_max_ee")#
cat(file="../log.txt", c("\n","Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
temp <- paste("Starting to quality filter (max expected errors = " , max_ee, ") in ", length(files), " samples.", sep="")#
message(temp)#
message(" ")#
cat(file="../log.txt", temp, append=T, sep="\n")#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fastq", "_ee.fasta", new_names)#
#
dir.create("_stats/merge_stats")#
log_names <- sub("_data", "_stats/merge_stats", new_names)#
log_names <- sub("_ee.fasta", "_ee.txt", log_names)#
#
# cmd max EE#
cmd <- paste("-fastq_filter \"", files, "\" -fastaout \"", new_names, "\" -fastq_maxee ", max_ee, sep="")#
tab_exp <- NULL#
for (i in 1:length(cmd)){#
A <- system2("usearch", cmd[i], stdout=T, stderr=T)#
cat(A, file=log_names[i], sep="\n")#
#
imput <- A[grep("FASTQ recs", A)]#
imput <- sub(" +(.*) +FASTQ.*", "\\1", imput)#
imput <- as.numeric(imput)#
#
pass <- A[grep("Converted ", A)]#
pass <- sub(" +(.*) +Converted.*", "\\1", pass)#
pass <- as.numeric(pass)#
#
pct <- round(pass/imput*100, digits=2)#
#
short_name <- sub("_data/(.*)_PE.*", "\\1", new_names[i])#
tab_exp <- rbind(tab_exp, c(short_name, pass, pct))#
#
meep <- paste(short_name, ": ", pct, "% pass EE ", sep="")#
message(meep)#
cat(file="../log.txt", meep, append=T, sep="\n")#
}#
cat(file="../log.txt", "\n", append=T, sep="\n")#
#
tab_exp <- data.frame(tab_exp)#
names(tab_exp) <- c("Sample", "Sequ_count", "percent_merged")#
#
write.csv(tab_exp, "_stats/max_ee_stats.csv")#
#
# make some plots?#
#
message(" ")#
message("Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
U_max_ee()
setwd("~/Documents/UNI_und_VORLESUNGEN/GitHub/JAMP/") # set the path to the PrimerMinder folder you just downloaded#
#
#install.packages("seqinr", dependencies=T)#
#
# install the PrimerMiner package icl dependencies#
install.packages("JAMP", repos = NULL, type="source")
