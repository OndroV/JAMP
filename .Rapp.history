setwd("~/Desktop/package_test2/")
library("JAMP")
# U_merge_PE v0.1#
# maybe add option to split and merge large files automatically?#
#
U_revcomp <- function(files="latest", RC=c(T,F), fastq=T, copy_unchanged=T){#
#
Core(module="U_revcomp")#
cat(file="../log.txt", c("Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub("_PE.", "_PE_RC.", new_names)#
#
# copy over files which are not rev comp#
if(copy_unchanged){#
#copy_name <- sub(".*/(_data/.*)", "\\1", files)#
temp <- file.copy(files[!RC], new_names[!RC])#
#
files[!RC]#
meep <- c(paste(length(temp), " files where copied to ", sub(".*/(.*)", "\\1", getwd()), " without generating the RevComp:", sep=""), "\n", sub(".*_data/", " ", files[!RC]))#
for (i in 1:length(meep)){#
cat(file="../log.txt", meep[i] , append=T, sep="\n")#
message(meep[i])#
}#
}#
message(" ")#
cmd <- paste("-fastx_revcomp \"", files[RC], if(fastq){"\" -fastqout \""} else {" -fastaout \""}, new_names[RC], "\" -label_suffix _RC",  sep="")#
#
temp <- paste("RevComp is generated for the following ", length(files[RC]), " files:", sep="")#
cat(file="../log.txt", temp , "\n", append=T, sep="\n")#
message(temp)#
temp <- new_names[RC]#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
# select sequ to make revcomp of!#
revcomp <- list.files("B_U_merge_PE/_data")#
revcomp_tf <- grepl(".*_.*_.R.*_.*_.*", revcomp)#
cbind(revcomp, revcomp_tf)#
#
U_revcomp(RC= revcomp_tf) # make RevComp of selected reads
meep
# U_merge_PE v0.1#
# maybe add option to split and merge large files automatically?#
#
U_revcomp <- function(files="latest", RC=c(T,F), fastq=T, copy_unchanged=T){#
#
Core(module="U_revcomp")#
cat(file="../log.txt", c("Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub("_PE.", "_PE_RC.", new_names)#
#
# copy over files which are not rev comp#
if(copy_unchanged){#
#copy_name <- sub(".*/(_data/.*)", "\\1", files)#
temp <- file.copy(files[!RC], new_names[!RC])#
#
files[!RC]#
meep <- c(paste(length(temp), " files where copied to ", sub(".*/(.*)", "\\1", getwd()), " without generating the RevComp:", sep=""), sub(".*_data/", "", files[!RC], ""))#
cat(file="../log.txt", meep , append=T, sep="\n")#
message(meep)#
}#
message(" ")#
cmd <- paste("-fastx_revcomp \"", files[RC], if(fastq){"\" -fastqout \""} else {" -fastaout \""}, new_names[RC], "\" -label_suffix _RC",  sep="")#
#
temp <- paste("RevComp is generated for the following ", length(files[RC]), " files:", sep="")#
cat(file="../log.txt", temp , "\n", append=T, sep="\n")#
message(temp)#
temp <- new_names[RC]#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
U_revcomp(RC= revcomp_tf) # make RevComp of selected reads
meep
# U_merge_PE v0.1#
# maybe add option to split and merge large files automatically?#
#
U_revcomp <- function(files="latest", RC=c(T,F), fastq=T, copy_unchanged=T){#
#
Core(module="U_revcomp")#
cat(file="../log.txt", c("Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub("_PE.", "_PE_RC.", new_names)#
#
# copy over files which are not rev comp#
if(copy_unchanged){#
#copy_name <- sub(".*/(_data/.*)", "\\1", files)#
temp <- file.copy(files[!RC], new_names[!RC])#
#
files[!RC]#
meep <- c(paste(length(temp), " files where copied to ", sub(".*/(.*)", "\\1", getwd()), " without generating the RevComp:", sep="\n"), sub(".*_data/", "", files[!RC], ""))#
cat(file="../log.txt", meep , append=T, sep="")#
message(meep)#
}#
message(" ")#
cmd <- paste("-fastx_revcomp \"", files[RC], if(fastq){"\" -fastqout \""} else {" -fastaout \""}, new_names[RC], "\" -label_suffix _RC",  sep="")#
#
temp <- paste("RevComp is generated for the following ", length(files[RC]), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names[RC]#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
U_revcomp(RC= revcomp_tf) # make RevComp of selected reads
# U_merge_PE v0.1#
# maybe add option to split and merge large files automatically?#
#
U_revcomp <- function(files="latest", RC=c(T,F), fastq=T, copy_unchanged=T){#
#
Core(module="U_revcomp")#
cat(file="../log.txt", c("Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub("_PE.", "_PE_RC.", new_names)#
#
# copy over files which are not rev comp#
if(copy_unchanged){#
#copy_name <- sub(".*/(_data/.*)", "\\1", files)#
temp <- file.copy(files[!RC], new_names[!RC])#
#
files[!RC]#
meep <- c(paste(length(temp), " files where copied to ", sub(".*/(.*)", "\\1", getwd()), " without generating the RevComp:", sep="\n"), sub(".*_data/", "", files[!RC], ""))#
for(i in 1:length(meep)){#
cat(file="../log.txt", meep[i] , append=T, sep="\n")#
message(meep[i])#
}#
}#
message(" ")#
cmd <- paste("-fastx_revcomp \"", files[RC], if(fastq){"\" -fastqout \""} else {" -fastaout \""}, new_names[RC], "\" -label_suffix _RC",  sep="")#
#
temp <- paste("RevComp is generated for the following ", length(files[RC]), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names[RC]#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
U_revcomp(RC= revcomp_tf) # make RevComp of selected reads
# U_merge_PE v0.1#
# maybe add option to split and merge large files automatically?#
#
U_revcomp <- function(files="latest", RC=c(T,F), fastq=T, copy_unchanged=T){#
#
Core(module="U_revcomp")#
cat(file="../log.txt", c("Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub("_PE.", "_PE_RC.", new_names)#
#
# copy over files which are not rev comp#
if(copy_unchanged){#
#copy_name <- sub(".*/(_data/.*)", "\\1", files)#
temp <- file.copy(files[!RC], new_names[!RC])#
#
files[!RC]#
meep <- c(paste(length(temp), " files where copied to ", sub(".*/(.*)", "\\1", getwd()), " without generating the RevComp:", sep="\n"), sub(".*_data/", "", files[!RC], sep=""))#
for(i in 1:length(meep)){#
cat(file="../log.txt", meep[i] , append=T, sep="\n")#
message(meep[i])#
}#
}#
message(" ")#
cmd <- paste("-fastx_revcomp \"", files[RC], if(fastq){"\" -fastqout \""} else {" -fastaout \""}, new_names[RC], "\" -label_suffix _RC",  sep="")#
#
temp <- paste("RevComp is generated for the following ", length(files[RC]), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names[RC]#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
U_revcomp(RC= revcomp_tf) # make RevComp of selected reads
# U_merge_PE v0.1#
# maybe add option to split and merge large files automatically?#
#
U_revcomp <- function(files="latest", RC=c(T,F), fastq=T, copy_unchanged=T){#
#
Core(module="U_revcomp")#
cat(file="../log.txt", c("Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub("_PE.", "_PE_RC.", new_names)#
#
# copy over files which are not rev comp#
if(copy_unchanged){#
#copy_name <- sub(".*/(_data/.*)", "\\1", files)#
temp <- file.copy(files[!RC], new_names[!RC])#
#
files[!RC]#
meep <- c(paste(length(temp), " files where copied to ", sub(".*/(.*)", "\\1", getwd()), " without generating the RevComp:", sep=""), sub(".*_data/", "", files[!RC]))#
for(i in 1:length(meep)){#
cat(file="../log.txt", meep[i] , append=T, sep="\n")#
message(meep[i])#
}#
}#
message(" ")#
cmd <- paste("-fastx_revcomp \"", files[RC], if(fastq){"\" -fastqout \""} else {" -fastaout \""}, new_names[RC], "\" -label_suffix _RC",  sep="")#
#
temp <- paste("RevComp is generated for the following ", length(files[RC]), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names[RC]#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
U_revcomp(RC= revcomp_tf) # make RevComp of selected reads
# U_merge_PE v0.1#
# maybe add option to split and merge large files automatically?#
#
U_revcomp <- function(files="latest", RC=c(T,F), fastq=T, copy_unchanged=T){#
#
Core(module="U_revcomp")#
cat(file="../log.txt", c("Version v0.1", "\n"), append=T, sep="\n")#
message(" ")#
#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub("_PE.", "_PE_RC.", new_names)#
#
# copy over files which are not rev comp#
if(copy_unchanged){#
#copy_name <- sub(".*/(_data/.*)", "\\1", files)#
temp <- file.copy(files[!RC], new_names[!RC])#
#
meep <- c(paste(length(temp), " files where copied to ", sub(".*/(.*)", "\\1", getwd()), " without generating the RevComp:", sep=""), sub(".*_data/", "", files[!RC]))#
for(i in 1:length(meep)){#
cat(file="../log.txt", meep[i] , append=T, sep="\n")#
message(meep[i])#
}#
}#
message(" ")#
cmd <- paste("-fastx_revcomp \"", files[RC], if(fastq){"\" -fastqout \""} else {" -fastaout \""}, new_names[RC], "\" -label_suffix _RC",  sep="")#
#
temp <- paste("RevComp is generated for the following ", length(files[RC]), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names[RC]#
for (i in 1:length(cmd)){#
system2("usearch", cmd[i], stdout=T, stderr=T)#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
U_revcomp(RC= revcomp_tf) # make RevComp of selected reads
# 161111 - JAMP tutorial!#
setwd("~/Documents/UNI_und_VORLESUNGEN/GitHub/JAMP/") # set the path to the PrimerMinder folder you just downloaded#
#
# install the PrimerMiner package icl dependencies#
install.packages("JAMP", repos = NULL, type="source", dependencies=T)
