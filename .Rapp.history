library("JAMP")
rev(comp("AGGGA"))
rev(comp(splitstr("AGGGA")))
rev(comp(strsplit("AGGGA")))
rev(comp(strsplit("AGGGA", "")))
strsplit("AGGGA", "")
rev(comp(unlist(strsplit("AGGGA", ""))))
rev(comp(unlist(strsplit("AGGGACCC", ""))))
rev(comp(unlist(strsplit("AGGGACCC", "")), forceToLower=F))
rev(comp(unlist(strsplit(rw[1], "")), forceToLower=F))
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]
rw <- "AGGGAGAGGGGTTTTT"
rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F))
i <- 1
rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F))
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F)), sep="")#
}#
#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-A ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names#
for (i in 1:length(cmd1)){#
system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
#
# reporting#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
# delete temp primer file!!!#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
# load the package into R#
library("JAMP")#
#
# base directory#
setwd("~/Desktop/package_test2/")
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F)), sep="")#
}#
#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-A ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names#
for (i in 1:length(cmd1)){#
system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
#
# reporting#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
# delete temp primer file!!!#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
Cutadapt(forward="BF2", reverse="BR1")
warnings()
paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F)), sep="")
paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F)), collapse="")
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F)), collapse="")#
}#
#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-A ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names#
for (i in 1:length(cmd1)){#
system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
#
# reporting#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
# delete temp primer file!!!#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F)), collapse="")#
}#
#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-A ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names#
for (i in 1:length(cmd1)){#
system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
#
# reporting#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
# delete temp primer file!!!#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
Cutadapt(forward="BF2", reverse="BR1")
warnings()
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F)), collapse="")#
}#
#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-a ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names#
for (i in 1:length(cmd1)){#
system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
#
# reporting#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
# delete temp primer file!!!#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
Cutadapt(forward="BF2", reverse="BR1")
rw
print(rw)
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F)), collapse="")#
}#
#
print(rw)#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-a ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names#
for (i in 1:length(cmd1)){#
system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
#
# reporting#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
# delete temp primer file!!!#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
cmd2
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F)), collapse="")#
}#
#
print(rw)#
#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-a ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names#
for (i in 1:length(cmd1)){#
system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
#
# reporting#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
# delete temp primer file!!!#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
Cutadapt(forward="BF2", reverse="BR1")
rw
rw <- "ACWGGWTGRACWGTNTAYCC"
paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F)), collapse="")
paste(rev(comp(unlist(strsplit(rw[i], ""), ambigious=T), forceToLower=F)), collapse="")
? comp
paste(rev(comp(unlist(strsplit(rw[i], ""), ambiguous=T), forceToLower=F)), collapse="")
paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F, ambiguous=T)), collapse="")
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw, using "seqinr"#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F, ambiguous=T)), collapse="")#
}#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-a ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
temp <- new_names#
for (i in 1:length(cmd1)){#
system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
#
# reporting#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
# delete temp primer file!!!#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
Cutadapt(forward="BF2", reverse="BR1")
system2("cutadapt", "--v", stdout=T, stderr=T)
system2("cutadapt", "--h", stdout=T, stderr=T)
A <- system2("cutadapt", "--h", stdout=T, stderr=T)
A
setwd("~/Desktop/package_test2/")
sub(".*_data/(.*)", "\\1", temp[i])
log_names <- sub(".*_data/(.*)", "\\1", temp)
new_names
setwd("~/Desktop/package_test2/")
files="latest"
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)
new_names
sub(".*_data/(.*)", "\\1", new_names)
log_names <- sub("_data", "_stats", new_names)
log_names
log_names <- sub("_data", "_stats/_cutadapt_logs", new_names)
log_names
sub(".fast[aq]", "", log_names)
dir.create("_stats/_cutadapt_logs")#
log_names <- sub("_data", "_stats/_cutadapt_logs", new_names)#
log_names <- sub(".fast[aq]", ".txt", log_names)
log_names
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw, using "seqinr"#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F, ambiguous=T)), collapse="")#
}#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-a ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
#
dir.create("_stats/_cutadapt_logs")#
log_names <- sub("_data", "_stats/_cutadapt_logs", new_names)#
log_names <- sub(".fast[aq]", ".txt", log_names)#
temp <- new_names#
for (i in 1:length(cmd1)){#
A <- system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
cat(file=log_names[i], cmd1[i], append=T, sep="\n")#
cat(file=log_names[i], A, append=T, sep="\n")#
A <- system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
cat(file=log_names[i], cmd2[i], append=T, sep="\n")#
cat(file=log_names[i], A, append=T, sep="\n")#
# reporting#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
# delete temp primer file!!!#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
Cutadapt(forward="BF2", reverse="BR1")
readLines(log_names[i])
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw, using "seqinr"#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F, ambiguous=T)), collapse="")#
}#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-a ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
#
dir.create("_stats/_cutadapt_logs")#
log_names <- sub("_data", "_stats/_cutadapt_logs", new_names)#
log_names <- sub(".fast[aq]", ".txt", log_names)#
temp <- new_names#
for (i in 1:length(cmd1)){#
A <- system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
cat(file=log_names[i], A, append=T, sep="\n")#
A <- system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
cat(file=log_names[i], A, append=T, sep="\n")#
# reporting#
#
stats <- readLines(log_names[i])#
#
meep <- sub(".*_data/(.*)", "\\1", temp[i])#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
# delete temp primer file!!!#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
Cutadapt(forward="BF2", reverse="BR1")
setwd("D_Cutadapt")
file.remove("_data/temp.txt")
log_names
log_names[i]
stats <- readLines(log_names[i])
stats
grep(Total reads processed:)
grep("Total reads processed:", stats)
stats[grep("Total reads processed:", stats)[1]]
in
reads_in <- stats[grep("Total reads processed:", stats)[1]]
sub(".* processed:", reads_in)
sub(".* processed:", "", reads_in)
sub(".* processed: +", "", reads_in)
reads_in
reads_in <- sub(".* processed: +", "", reads_in)
reads_in
as.numeric(reads_in)
?as.numeric
reads_in
sub(",", "", reads_in)
as.numeric(sub(",", "", reads_in))
reads_in <- as.numeric(sub(",", "", reads_in))
reads_in <- "12,1212,1212,2"
reads_in <- as.numeric(sub(",", "", reads_in))
sub(",", "", reads_in)
reads_in <- "12,1212,1212,2"
reads_in
sub(",", "", reads_in)
sub(",", "", reads_in)
gsub(",", "", reads_in)
stats
stats[grep("Reads written (passing filters):", stats)]
stats[grep("Reads written (passing filters):", stats)]
stats
stats[grep("Reads written \\(passing filters\\):", stats)]
reads_out <- stats[grep("Reads written \\(passing filters\\):", stats)[2]]#
reads_out <- sub(".* filters.: +", "", reads_out)#
reads_out <- as.numeric(gsub(",", "", reads_out))
sub(".* filters.: +", "", reads_out)
reads_out <- stats[grep("Reads written \\(passing filters\\):", stats)[2]]
sub(".* filters.: +", "", reads_out)
sub(" .*", "", reads_out)
reads_out <- sub(".* filters.: +", "", reads_out)
sub(" .*", "", reads_out)
reads_out <- stats[grep("Reads written \\(passing filters\\):", stats)[2]]#
reads_out <- sub(".* filters.: +", "", reads_out)#
reads_out <- sub(" .*", "", reads_out)#
reads_out <- as.numeric(gsub(",", "", reads_out))
reads_out
reads_in
reads_in <- stats[grep("Total reads processed:", stats)[1]]#
reads_in <- sub(".* processed: +", "", reads_in)#
reads_in <- as.numeric(gsub(",", "", reads_in))
reads_in
reads_in/reads_out
reads_out/reads_in
reads_out/reads_in*100
round(reads_out/reads_in*100, digits=2)
keep
keep <- round(reads_out/reads_in*100, digits=2)
paste(sub(".*_data/(.*)", "\\1", temp[i]))
temp <- new_names
paste(sub(".*_data/(.*)", "\\1", temp[i]))
meep <- paste(sub(".*_data/(.*)", "\\1", temp[i]), " - ", keep, sep="")
meep
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw, using "seqinr"#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F, ambiguous=T)), collapse="")#
}#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-a ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
#
dir.create("_stats/_cutadapt_logs")#
log_names <- sub("_data", "_stats/_cutadapt_logs", new_names)#
log_names <- sub(".fast[aq]", ".txt", log_names)#
temp <- new_names#
for (i in 1:length(cmd1)){#
A <- system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
cat(file=log_names[i], A, append=T, sep="\n")#
A <- system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
cat(file=log_names[i], A, append=T, sep="\n")#
# reporting#
#
stats <- readLines(log_names[i])#
reads_in <- stats[grep("Total reads processed:", stats)[1]]#
reads_in <- sub(".* processed: +", "", reads_in)#
reads_in <- as.numeric(gsub(",", "", reads_in))#
#
reads_out <- stats[grep("Reads written \\(passing filters\\):", stats)[2]]#
reads_out <- sub(".* filters.: +", "", reads_out)#
reads_out <- sub(" .*", "", reads_out)#
reads_out <- as.numeric(gsub(",", "", reads_out))#
#
keep <- round(reads_out/reads_in*100, digits=2)#
#
meep <- paste(sub(".*_data/(.*)", "\\1", temp[i]), " - ", keep, "% reads passed", sep="")#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
file.remove("_data/temp.txt") # remove temporary file#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
B <- NULL
abundance
abundance <- NULL
abundnace
abundance <- NULL
abundance
exp <- NULL
sub(".*_data/(.*)", "\\1", temp[i])
exp <- rbind(exp, c(sub(".*_data/(.*)", "\\1", temp[i]), reads_out, keep))
exp <- rbind(exp, c(sub(".*_data/(.*)", "\\1", temp[i]), reads_out, keep))
exp <- rbind(exp, c(sub(".*_data/(.*)", "\\1", temp[i]), reads_out, keep))
exp <- rbind(exp, c(sub(".*_data/(.*)", "\\1", temp[i]), reads_out, keep))
exp
exp <- data.frame(exp)
names(exp)
exp
names(exp) <- c("Sample", "Abundance", "pct_pass")
temp
meep <- paste(sub(".*_data/(.*)_PE", "\\1", temp[i]), " - ", keep, "% reads passed", sep="")
meep
meep <- paste(sub(".*_data/(.*)_PE.*", "\\1", temp[i]), " - ", keep, "% reads passed", sep="")
meep
exp <- data.frame(exp)#
names(exp) <- c("Sample", "Abundance", "pct_pass")#
write.csv("_stats/cut_pass.csv")
write.csv(exp, "_stats/cut_pass.csv")
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw, using "seqinr"#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F, ambiguous=T)), collapse="")#
}#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-a ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
#
dir.create("_stats/_cutadapt_logs")#
log_names <- sub("_data", "_stats/_cutadapt_logs", new_names)#
log_names <- sub(".fast[aq]", ".txt", log_names)#
#
exp <- NULL#
temp <- new_names#
for (i in 1:length(cmd1)){#
A <- system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
cat(file=log_names[i], A, append=T, sep="\n")#
A <- system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
cat(file=log_names[i], A, append=T, sep="\n")#
# reporting#
#
stats <- readLines(log_names[i])#
#
reads_in <- stats[grep("Total reads processed:", stats)[1]]#
reads_in <- sub(".* processed: +", "", reads_in)#
reads_in <- as.numeric(gsub(",", "", reads_in))#
#
reads_out <- stats[grep("Reads written \\(passing filters\\):", stats)[2]]#
reads_out <- sub(".* filters.: +", "", reads_out)#
reads_out <- sub(" .*", "", reads_out)#
reads_out <- as.numeric(gsub(",", "", reads_out))#
#
keep <- round(reads_out/reads_in*100, digits=2)#
exp <- rbind(exp, c(sub(".*_data/(.*)", "\\1", temp[i]), reads_out, keep))#
#
meep <- paste(sub(".*_data/(.*)_PE.*", "\\1", temp[i]), " - ", keep, "% reads passed", sep="")#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
exp <- data.frame(exp)#
names(exp) <- c("Sample", "Abundance", "pct_pass")#
write.csv(exp, "_stats/cut_pass.csv")#
#
file.remove("_data/temp.txt") # remove temporary file#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
# Cutadapt v0.1#
#
Cutadapt <- function(files="latest", forward=NA, reverse=NA, fastq=T){#
#
Core(module="Cutadapt")#
cat(file="../log.txt", c("Module Version: v0.1", "\n"), append=T, sep="\n")#
#
# cutadapt version#
temp <- paste("Util Version: ", "Cutadapt v", system2("cutadapt", "--v", stdout=T, stderr=T), sep="")#
message(temp)#
cat(file="../log.txt", temp, append=T, sep="\n")#
message(" ")#
if (files=="latest"){#
source("robots.txt")#
files <- list.files(paste("../", last_data, "/_data", sep=""), full.names=T)#
}#
#
# new file names#
new_names <- sub(".*(_data/.*)", "\\1", files)#
new_names <- sub(".fast", "_cut.fast", new_names)#
#
# get primer sequences / names#
primers <- read.csv(paste(system.file(package="JAMP"), "/primers.csv", sep=""), stringsAsFactors=F)#
# replace primer name with sequence#
if(length(forward)==1){#
fw <- primers$Primer_Sequence[primers$Primer_Name==forward]#
if(length(fw)==0){fw <- forward}#
}#
if(length(reverse)==1){#
rw <- primers$Primer_Sequence[primers$Primer_Name==reverse]#
if(length(fw)==0){rw <- reverse}#
}#
#
# match multiple primer names#
if(length(forward)>1){#
fw <- primers$Primer_Sequence[match(forward, primers$Primer_Name)]#
}#
if(length(reverse)>1){#
rw <- primers$Primer_Sequence[match(reverse, primers$Primer_Name)]#
}#
#
#build rev comp of rw, using "seqinr"#
for (i in 1:length(rw)){#
rw[i] <- paste(rev(comp(unlist(strsplit(rw[i], "")), forceToLower=F, ambiguous=T)), collapse="")#
}#
# add: write down used primers in log!#
#
cmd1 <- paste("-g ^", fw, " -o _data/temp.txt \"", files, "\"", " -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") # forward adapter#
cmd2 <- paste("-a ", rw, "$ -o ", new_names, " _data/temp.txt -f ", if(fastq){"fastq"}else{"fasta"}, " --discard-untrimmed", sep="") #rverse adapter#
#
temp <- paste("Starting to remove adapters (primers) on both ends in ", length(cmd1), " files:", sep="")#
cat(file="../log.txt", temp , append=T, sep="\n")#
message(temp)#
#
dir.create("_stats/_cutadapt_logs")#
log_names <- sub("_data", "_stats/_cutadapt_logs", new_names)#
log_names <- sub(".fast[aq]", ".txt", log_names)#
#
exp <- NULL#
temp <- new_names#
for (i in 1:length(cmd1)){#
A <- system2("cutadapt", cmd1[i], stdout=T, stderr=T)#
cat(file=log_names[i], A, append=T, sep="\n")#
A <- system2("cutadapt", cmd2[i], stdout=T, stderr=T)#
cat(file=log_names[i], A, append=T, sep="\n")#
# reporting#
#
stats <- readLines(log_names[i])#
#
reads_in <- stats[grep("Total reads processed:", stats)[1]]#
reads_in <- sub(".* processed: +", "", reads_in)#
reads_in <- as.numeric(gsub(",", "", reads_in))#
#
reads_out <- stats[grep("Reads written \\(passing filters\\):", stats)[2]]#
reads_out <- sub(".* filters.: +", "", reads_out)#
reads_out <- sub(" .*", "", reads_out)#
reads_out <- as.numeric(gsub(",", "", reads_out))#
#
keep <- round(reads_out/reads_in*100, digits=2)#
exp <- rbind(exp, c(sub(".*_data/(.*)", "\\1", temp[i]), reads_out, keep))#
#
meep <- paste(sub(".*_data/(.*)_PE.*", "\\1", temp[i]), " - ", keep, "% reads passed", sep="")#
cat(file="../log.txt", meep, append=T, sep="\n")#
message(meep)#
}#
#
exp <- data.frame(exp)#
names(exp) <- c("Sample", "Abundance", "pct_pass")#
write.csv(exp, "_stats/cut_pass.csv")#
#
file.remove("_data/temp.txt") # remove temporary file#
message(" ")#
message(" Module completed!")#
#
cat(file="../log.txt", paste(Sys.time(), "\n", "Module completed!", "", sep="\n"), append=T, sep="\n")#
#
setwd("../")#
}
setwd("~/Desktop/package_test2/")
Cutadapt(forward="BF2", reverse="BR1")
setwd("~/Documents/UNI_und_VORLESUNGEN/GitHub/JAMP/") # set the path to the PrimerMinder folder you just downloaded
install.packages("JAMP", repos = NULL, type="source")
